///*In chess, queens can move any number of squares vertically, horizontally, or diagonally. The n-queens puzzle is the problem of placing n queens on an n Ã— n chessboard so that no two queens can attack each other.
//Given an integer n, print all possible distinct solutions to the n-queens puzzle. Each solution contains distinct board configurations of the placement of the n queens, where the solutions are arrays that contain permutations of [1, 2, 3, .. n]. The number in the ith position of the results array indicates that the ith column queen is placed in the row with that number. In your solution, the board configurations should be returned in lexicographical order.
//
//Example
//For n = 1, the output should be
//solution(n) = [[1]];
//For n = 4, the output should be
//  solution(n) = [[2, 4, 1, 3],
//                [3, 1, 4, 2]]
//This diagram of the second permutation, [3, 1, 4, 2], will help you visualize its configuration:*/

import java.util.*;
public class nQueen {

    public static LinkedList<LinkedList<Integer>> ll = new LinkedList<LinkedList<Integer>>();


    public static int[][] solution(int n) {

        if(n==0)
            return new int[n][n];
        if(n==1)
        {
            int[][] fi = new int[n][n];
            fi[0][0]=1;
            return fi;
        }

        int [][] chess = new int [n][n];

        backtrack(chess, 0);
        int[][] finalans= new int [ll.size()][n];
        int i =0;
        //if(!ll.isEmpty())
        for( List l1 : ll)
        {
            for(int j=0;j<l1.size();j++)
            {

                finalans[i][j]=(int)l1.get(j);

            }
            i++;
        }
        ll.clear();
        return finalans;

    }

    public static void backtrack(int [][] chess, int row)
    {
        if(row==chess.length)
        {
            addToList(chess);
            return;
        }

        for(int col =0 ; col<chess.length ; col++)
        {
            if(checkAt(row, col, chess))
            {
                chess[row][col]=1;
                backtrack(chess, row+ 1);
                chess[row][col]=0;
            }

        }
    }
    public static boolean checkAt(int row, int col, int[][] chess)
    {
        for(int i = row-1, j=col ; i>=0; i--)
        {
            if(chess[i][j]==1)
                return false;
        }

        for(int i =row-1,j=col-1; i>=0 && j>=0 ; i--,j--)
        {
            if(chess[i][j]==1)
                return false;
        }

        for(int i =row-1,j=col+1; i>=0 && j<chess.length ; i--,j++)
        {
            if(chess[i][j]==1)
                return false;
        }
        return true;
    }

    public static void addToList(int[][] chess)
    {
        LinkedList<Integer> l1= new LinkedList<>();
        for(int i = 0 ; i<chess.length  ; i++)
        {
            for(int j = 0 ; j<chess.length  ; j++)
            if(chess[i][j]==1)
                l1.add(j+1);
        }

        ll.add(l1);
    }
    public static void main(String[] args) {
        System.out.println("hello world");
        int[][] ans = solution(2);


            System.out.println(Arrays.deepToString(ans));
    }
}
